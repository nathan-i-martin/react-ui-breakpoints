{"version":3,"file":"index.js","sources":["../src/lib/hooks/useScreen.ts","../src/lib/hooks/useMediaBreakpoint.ts","../src/lib/hooks/useScreenBreakpoint.ts","../src/lib/hooks/useElementBreakpoint.ts"],"sourcesContent":["import { BreakpointMapping } from \"../resources/BreakpointMapping\";\r\n\r\n/**\r\n * Returns a JSX Element based on the current screen size.\r\n * @param defaultMapping JSX Element to return is no matches are made.\r\n * @param mappings Array of screen mappings to compare against. Mappings are compared in order they are provided.\r\n * @returns A JSX Element.\r\n */\r\nexport const useScreen = (defaultMapping: JSX.Element, ...mappings: BreakpointMapping[]): JSX.Element => {\r\n    let finalOutput = defaultMapping;\r\n\r\n    if(!mappings) return finalOutput;\r\n    if(mappings.length < 1) return finalOutput;\r\n\r\n    mappings.forEach((mapping: BreakpointMapping) => {\r\n        if(mapping.isActive) finalOutput = mapping.element;\r\n    });\r\n\r\n    return finalOutput;\r\n}","import { useMediaQuery } from 'react-responsive';\r\n\r\n/**\r\n * Check is a media query is valid.\r\n * @param query A string containing any integer followed by 'px'.\r\n * @returns A boolean. `true` if the current screen width matches the query. `false` if the current screen width does not match the query.\r\n */\r\nexport const useMediaBreakpoint = (query: string): boolean => useMediaQuery({'query': `(max-width: ${query})`});","import { BreakpointMapping } from \"../resources/BreakpointMapping\";\r\nimport { useMediaBreakpoint } from \"./useMediaBreakpoint\";\r\n/**\r\n * Create a screen breakpoint mapping to be used with the useScreen hook\r\n * @param mediaBreakpoint A string starting with an int and ending with \"px\". The media query is based on: `(max-width: n)`\r\n * @param element The element mapped to the breakpoint\r\n * @returns Returns a BreakpointMapping\r\n */\r\nexport const useScreenBreakpoint = (breakpoint: string, element: JSX.Element): BreakpointMapping => ({\r\n    isActive: useMediaBreakpoint(breakpoint),\r\n    element: element\r\n} as BreakpointMapping)","import * as React from \"react\";\r\nimport { BreakpointMapping } from \"../resources/BreakpointMapping\";\r\n\r\n/**\r\n * Create a screen mapping to be used with the useScreen hook\r\n * @param self A reference to the object to check for width values\r\n * @param breakpoint A string starting with an int and ending with \"px\". The media query is based on: `(max-width: n)`\r\n * @param element The element mapped to the breakpoint\r\n * @returns Returns a BreakpointMapping\r\n */\r\nexport const useElementBreakpoint = (self: React.RefObject<HTMLElement>, breakpoint: string, element: JSX.Element): BreakpointMapping => {\r\n    console.error(\"It is not recommended to use useElementBreakpoint in projects as it's behavior is unpredictable!\");\r\n\r\n    let isActive = false;\r\n\r\n    const width = self?.current?.offsetWidth;\r\n\r\n    if(width == undefined) return ({\r\n        isActive,\r\n        element\r\n    } as BreakpointMapping)\r\n\r\n    const breakpointAsNumber: number = parseInt(breakpoint.replace('px',''),10);\r\n    \r\n\r\n    if(breakpointAsNumber >= width) isActive = true;\r\n\r\n    return ({\r\n        isActive,\r\n        element\r\n    } as BreakpointMapping)\r\n}"],"names":["useMediaQuery"],"mappings":";;;;AAEA;;;;;AAKG;AACI,IAAM,SAAS,GAAG,UAAC,cAA2B,EAAA;IAAE,IAAgC,QAAA,GAAA,EAAA,CAAA;SAAhC,IAAgC,EAAA,GAAA,CAAA,EAAhC,EAAgC,GAAA,SAAA,CAAA,MAAA,EAAhC,EAAgC,EAAA,EAAA;QAAhC,QAAgC,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACnF,IAAI,WAAW,GAAG,cAAc,CAAC;AAEjC,IAAA,IAAG,CAAC,QAAQ;AAAE,QAAA,OAAO,WAAW,CAAC;AACjC,IAAA,IAAG,QAAQ,CAAC,MAAM,GAAG,CAAC;AAAE,QAAA,OAAO,WAAW,CAAC;AAE3C,IAAA,QAAQ,CAAC,OAAO,CAAC,UAAC,OAA0B,EAAA;QACxC,IAAG,OAAO,CAAC,QAAQ;AAAE,YAAA,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;AACvD,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,WAAW,CAAC;AACvB;;ACjBA;;;;AAIG;IACU,kBAAkB,GAAG,UAAC,KAAa,EAAA,EAAc,OAAAA,6BAAa,CAAC,EAAC,OAAO,EAAE,sBAAe,KAAK,EAAA,GAAA,CAAG,EAAC,CAAC,CAAA;;ACL/G;;;;;AAKG;AACU,IAAA,mBAAmB,GAAG,UAAC,UAAkB,EAAE,OAAoB,EAAwB,EAAA,QAAC;AACjG,IAAA,QAAQ,EAAE,kBAAkB,CAAC,UAAU,CAAC;AACxC,IAAA,OAAO,EAAE,OAAO;CACG,EAAA;;ACRvB;;;;;;AAMG;IACU,oBAAoB,GAAG,UAAC,IAAkC,EAAE,UAAkB,EAAE,OAAoB,EAAA;;AAC7G,IAAA,OAAO,CAAC,KAAK,CAAC,kGAAkG,CAAC,CAAC;IAElH,IAAI,QAAQ,GAAG,KAAK,CAAC;AAErB,IAAA,IAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,KAAJ,IAAA,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,CAAC;IAEzC,IAAG,KAAK,IAAI,SAAS;QAAE,OAAQ;AAC3B,YAAA,QAAQ,EAAA,QAAA;AACR,YAAA,OAAO,EAAA,OAAA;SACY,CAAA;AAEvB,IAAA,IAAM,kBAAkB,GAAW,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAC,EAAE,CAAC,EAAC,EAAE,CAAC,CAAC;IAG5E,IAAG,kBAAkB,IAAI,KAAK;QAAE,QAAQ,GAAG,IAAI,CAAC;IAEhD,OAAQ;AACJ,QAAA,QAAQ,EAAA,QAAA;AACR,QAAA,OAAO,EAAA,OAAA;KACY,CAAA;AAC3B;;;;;;;"}